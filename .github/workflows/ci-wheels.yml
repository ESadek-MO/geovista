# Reference:
#   - https://github.com/actions/checkout
#   - https://github.com/actions/download-artifact
#   - https://github.com/actions/setup-python
#   - https://github.com/actions/upload-artifact
#   - https://github.com/pypa/build
#   - https://github.com/pypa/gh-action-pypi-publish
#   - https://test.pypi.org/help/#apitoken


name: ci-wheels

on: [pull_request, push, release]


jobs:
  build-artifacts:
    name: "Build PyPI artifacts"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: "Build sdist/bdist"
      run: |
        # geovista is a pure python package, so simply use pypa/build
        pipx run build

    - name: "List built distributions"
      run: |
        ls -l ${{ github.workspace }}/dist

    - uses: actions/upload-artifact@v2
      with:
        name: pypi-artifacts
        path: ${{ github.workspace }}/dist


  test-artifacts:
    needs: [build-artifacts]
    name: "Test bdist wheel on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: pypi-artifacts
        path: ${{ github.workspace }}/dist

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: "Install bdist"
      working-directory: ${{ github.workspace }}/dist
      run: |
        python -m pip install geovista-*.whl
        python --version
        python -c "import geovista; print(geovista.__version__)"


  publish-artifacts-test-pypi:
    needs: [test-artifacts]
    name: "Publish to Test PyPI"
    runs-on: ubuntu-latest
    # upload to Test PyPI for every pull-request and commit on main or release feature branch
    if: github.event_name != 'release' && ((github.event.ref == 'refs/heads/main') || startsWith(github.event.ref, 'refs/tags/v'))
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: pypi-artifacts
        path: ${{ github.workspace }}/dist

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/


  publish-artifacts-pypi:
    needs: [test-artifacts]
    name: "Publish to PyPI"
    runs-on: ubuntu-latest
    # upload to PyPI for every GH release
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: pypi-artifacts
        path: ${{ github.workspace }}/dist

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
